{% extends 'base.html.twig' %}

{% block title %}Noitl.Craft{% endblock %}

{% block body %}
    <img class="header-image" src="{{ asset('header.webp') }}" alt="Headerbild">
    <h1 class="page-title">Noitl.Craft</h1>

    <div class="cards">
        <div class="card" style="flex: .5">
            <div class="card__title"><span class="material-icons">traffic</span> Server-Status</div>
            <div class="card__content">
                <div class="server-status__value">Laden...</div>
                <div class="server-status__action is-hidden">
                    <button id="start-server-button"><span class="material-icons">play_arrow</span> Server starten
                    </button>
                </div>
                <div class="server-status__players is-hidden"></div>
            </div>
        </div>

        <div class="card">
            <div class="card__title"><span class="material-icons">info</span> Informationen</div>
            <div class="card__content">
                <p>
                    <strong>Erforderliche Minecraft-Version:</strong><br>
                    <code>1.21.8</code>
                </p>
                <p>
                    <strong>Server-Adresse:</strong><br>
                    <code>craft.noitl.space</code>
                </p>
                <p>Der Server wird automatisch gestoppt, wenn für 5 Minuten keine Spieler online waren und muss dann
                    über den Button auf dieser Seite gestartet werden.</p>
                <p>Auf dem Server sind alle bisherigen Dörfer durch Portale erreichbar.</p>
                <p>Nur Spieler, die auf der Whitelist stehen, können dem Server beitreten. Alle Spieler, die früher
                    schon auf dem Kolping-Minecraft-Server gespielt haben, sind bereits auf der Whitelist.</p>
            </div>
        </div>

        <div class="column">
            <div class="card">
                <div class="card__title"><span class="material-icons">map</span> Live-Map</div>
                <div class="card__content">
                    <p>Auf der Live-Map kann man, wie in Google-Maps, den Server erkunden und sehen, wo gerade die
                        Spieler unterwegs sind.</p>

                    <a class="button" href="{{ path('map_page') }}" target="_blank" id="map-button">Zur Map</a>

                    <div class="is-hidden" id="map-button-hint" style="margin-top: 1em">
                        <small>
                            <em>(Nur verfügbar, wenn der Server läuft)</em>
                        </small>
                    </div>
                </div>
            </div>
        </div>

        <div class="card">
            <div class="card__title"><span class="material-icons">mic</span> Voice-Chat</div>
            <div class="card__content">
                <p>
                    Für Voice-Chat gibt es einen Discord-Channel, dem jeder beitreten kann.
                </p>
                <p>
                    Außerdem gibt es im Discord den Channel "Server-Status" in dem Benachrichtigungen geschickt
                    werden, wenn der Server gestartet / gestoppt wird, und wenn ein Spieler dem Server beitritt.
                    Vielleicht hast du ja dann Lust mitzuspielen. Die Benachrichtigungen kannst du im Discord
                    natürlich stumm schalten.
                </p>
                <p>
                    <a class="button" href="https://discord.gg/F4P9XXp" target="_blank">Zum Discord</a>
                </p>
            </div>
        </div>
    </div>


    <script>
        const serverStatusState$ = document.querySelector('.server-status__value')
        const serverStatusAction$ = document.querySelector('.server-status__action');
        const serverStatusPlayers$ = document.querySelector('.server-status__players');
        const startServerButton$ = document.getElementById('start-server-button');
        const mapButton$ = document.getElementById('map-button');
        const mapButtonHint$ = document.getElementById('map-button-hint')

        let interval = false;


        const getServerStatus = () => {
            return fetch('/api/status').then(response => response.json());
        }

        const hideAction = () => {
            serverStatusAction$.classList.add('is-hidden')
        }

        const showAction = () => {
            serverStatusAction$.classList.remove('is-hidden')
        }

        const showPlayers = (players) => {
            serverStatusPlayers$.classList.remove('is-hidden')
            let avatars = players.map(player => {
                return `
<div class="server-status__players__item">
    <img
        src="https://mc-heads.net/body/${player}.png"
        alt="Avatar von ${player}">
    <div class="server-status__players__name">${player}</div>
</div>
                `
            });

            serverStatusPlayers$.innerHTML = avatars.join("");
        }

        const hidePlayers = () => {
            serverStatusPlayers$.classList.add('is-hidden')
        }

        const disableMapButton = () => {
            mapButton$.classList.add('disabled')
            mapButtonHint$.classList.remove('is-hidden')
        }

        const enableMapButton = () => {
            mapButton$.classList.remove('disabled')
            mapButtonHint$.classList.add('is-hidden')
        }

        const updateServerStatus = () => {
            getServerStatus()
                .then(status => {
                    switch (status.state) {
                        case 'STOPPED':
                            serverStatusState$.innerText = 'Ausgeschaltet';
                            showAction();
                            hidePlayers();
                            disableMapButton();
                            break;
                        case 'STARTING':
                            serverStatusState$.innerText = 'Wird gestartet';
                            hideAction();
                            hidePlayers();
                            disableMapButton();
                            break;
                        case 'RUNNING':
                            serverStatusState$.innerHTML = `Läuft...<br><small>(${status.playerCount} Spieler online)</small>`
                            hideAction();
                            showPlayers(status.players);
                            enableMapButton();
                            break;
                    }
                })
                .catch(() => {
                    hideAction();
                    serverStatusState$.innerText = 'Kann nicht geladen werden...'
                })
        }

        const startInterval = () => {
            interval = setInterval(() => {
                updateServerStatus();
            }, 5000)
        }

        startServerButton$.addEventListener('click', e => {
            e.preventDefault();

            hideAction();
            clearInterval(interval);
            serverStatusState$.innerText = 'Starten...'

            fetch('/api/start-server', {
                method: 'POST'
            }).then(response => {
                if (response.ok) {
                    serverStatusState$.innerText = 'Start wird ausgeführt. Bitte warten.'
                    setTimeout(startInterval, 5000)
                } else {
                    if (response.status === 429) {
                        serverStatusState$.innerText = 'Der Server wurde gerade erst gestartet. Versuche es später erneut...'
                    } else {
                        serverStatusState$.innerText = 'Fehler beim Starten... Versuche es später erneut...'
                    }

                    startInterval()
                }

            }).catch(() => {
                serverStatusState$.innerText = 'Fehler beim Starten... Versuche es später erneut...'
                startInterval()
            })
        })

        updateServerStatus();

        startInterval()


    </script>

{% endblock %}